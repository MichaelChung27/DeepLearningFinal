# -*- coding: utf-8 -*-
"""CS1470FinalProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13mNa7fFdMgQbXUZG2l0jgxcX-0829VpM
"""

import tensorflow as tf
import numpy as np
import pandas as pd

"""Gathering Data:"""

# Data comes from: https://www.sportsbookreviewsonline.com/scoresoddsarchives/nba/nbaoddsarchives.htm
# ^ for game results and odds 

# Need to download data to drive and then mount to that place in the drive
from google.colab import drive 
drive.mount('/content/drive', force_remount=True) 
drive_path="/content/drive/MyDrive/CS1470 Final Project/"

# Game files of form "nba odds 2010-2011.xlsx"
game_files = []
years = []
for i in range(10, 17):
  years.append(str(i) + "-" + str(i + 1))
  game_files.append(drive_path + "nba odds 20" + str(i) + "-" + str(i+1) + ".xlsx")

# Read in excel files by year, combine at the end to make sure stats aren't
# messed up by incorrect years

# Additionally:
# Need to get opponent data into game matchup for each game and additionally 
# record if it was a win or a loss

# Oppenent information:
game_dfs = []
for f in range(len(game_files)):
  games_df = pd.read_excel(game_files[f])
  games_df['Team'] = games_df['Team'].str.replace(" ","")
  # Lists to generate new columns
  opponent = []
  opponent_win_loss = []
  opponent_odds = []
  year = []
  win_or_loss = []
  opponent_points_for = []
  for i in range(len(games_df)):
    year.append(years[f])
  
  for i in range(0, len(games_df), 2):
    # Skipping by two 
    # Example for adding opponent information:
    # Opponent for first team in matchup
    opponent.append(games_df['Team'].iloc[i + 1])
    # Opponent for second team in matchup
    opponent.append(games_df['Team'].iloc[i])
    opponent_odds.append(games_df['ML'].iloc[i + 1])
    opponent_odds.append(games_df['ML'].iloc[i])
    opponent_points_for.append(games_df['Final'].iloc[i + 1])
    opponent_points_for.append(games_df['Final'].iloc[i])

    # Need to determine who won or loss and assign that a value
    if games_df['Final'].iloc[i] > games_df['Final'].iloc[i + 1]:
      win_or_loss.append('W')
      win_or_loss.append('L')
    else:
      win_or_loss.append('L')
      win_or_loss.append('W')
  # Adding calculated columns:
  games_df['Opponent'] = opponent
  games_df['opponent_odds'] = opponent_odds
  games_df['Win_or_loss'] = win_or_loss
  games_df['Opponent_final'] = opponent_points_for
  
  
  # Need to sum up wins before each game in the season:
  teams = games_df['Team'].unique()
  total_wins = []
  total_losses = []
  games_played = []
  win_loss_perc = []

  # Dictionary of lists of dictionaries of lists 
  team_dict = dict()
  
  # Initialize dictionaries
  teams = games_df['Team'].unique()
  for key in teams:
    op_teams = []
    for team in teams:
      if key != team:
        op_teams.append(team)
    if key not in team_dict:
      team_dict[key] = [[0], [0], [0], [0], [0], [0], [0], 
                              dict.fromkeys(op_teams, [[0], [0], [0], [0]]), 
                                                       [0], [0], [0], [0]]

  # Lists:
  wins = [] #0
  losses = [] #1
  games_played = [] #2
  win_percent = [] #3
  points_for = [] #4
  points_against = [] #5
  point_diff = [] #6
  # Lists within dict
  head_to_head = [] #7, wins then losses then games played then percent win
  op_win_percent = [] #8
  op_points_for = [] #9
  op_points_against = [] #10
  op_point_diff = [] #11
  
  for i in range(len(games_df)):
    # Get current wins, losses, games played, win percent:
    key = games_df['Team'].iloc[i]
    # Ordering of list = wins, losses, games played, win percent, points for,
    # points against, point differential 
    # head to head win percent vs opponent, opponent win percent, opponent points for,
    # opponent points against, opponent point differential
    # Initialize op_team_dict with every team but current one:
    
    op_team = games_df['Opponent'].iloc[i]
     
    # Adds wins, losses, games_played, win_percent:
    op_points_for.append(team_dict[key][9][-1])
    op_points_against.append(team_dict[key][10][-1])
    op_point_diff.append(team_dict[key][9][-1] - team_dict[key][10][-1])
    
    wins.append(team_dict[key][0][-1])
    losses.append(team_dict[key][1][-1])
    games_played.append(team_dict[key][2][-1])
    win_percent.append(team_dict[key][3][-1])
    if games_df['Win_or_loss'].iloc[i] == 'W':
      team_dict[key][0].append(team_dict[key][0][-1] + 1)
    else:
      team_dict[key][1].append(team_dict[key][1][-1] + 1)
    team_dict[key][2].append(team_dict[key][2][-1] + 1)
    team_dict[key][3].append(round(team_dict[key][0][-1] / team_dict[key][2][-1], 2))
    

    # Adds points for, points against, and point differential:
    points_for.append(team_dict[key][4][-1])
    points_against.append(team_dict[key][5][-1])
    point_diff.append(team_dict[key][4][-1] - team_dict[key][5][-1])
    team_dict[key][4].append(team_dict[key][4][-1] + games_df['Final'].iloc[i])
    team_dict[key][5].append(team_dict[key][5][-1] + games_df['Opponent_final'].iloc[i])
    team_dict[key][6].append(team_dict[key][4][-1] - team_dict[key][5][-1])
    

    # Adds head_to_head 
    head_to_head_current = []
    for x in range(4):
      head_to_head_current.append(team_dict[key][7][op_team][x][-1])
    head_to_head.append(head_to_head_current)

    if games_df['Win_or_loss'].iloc[i] == 'W':
      team_dict[key][7][op_team][0].append(team_dict[key][7][op_team][0][-1] + 1)
    else: 
      team_dict[key][7][op_team][1].append(team_dict[key][7][op_team][1][-1] + 1)
    team_dict[key][7][op_team][2].append(team_dict[key][7][op_team][2][-1] + 1)
    team_dict[key][7][op_team][3].append(round(team_dict[key][7][op_team][0][-1] 
                                               / team_dict[key][7][op_team][2][-1], 2))
    

    # Adds opponent win percentage 
    if games_df['Win_or_loss'].iloc[i] == 'W':
      op_win_percent.append(team_dict[key][8][-1])
      team_dict[key][8].append(round(team_dict[op_team][0][-1] + 1 / (team_dict[op_team][2][-1] + 1), 2))
      
    else: 
      op_win_percent.append(team_dict[key][8][-1])
      team_dict[key][8].append(round(team_dict[op_team][0][-1] / (team_dict[op_team][2][-1] + 1), 2))
      
    # Adds points for, points against, and point differential:
    team_dict[key][9].append(team_dict[op_team][4][-1])
    team_dict[key][10].append(team_dict[op_team][5][-1])
    team_dict[key][11].append(team_dict[key][9][-1] - team_dict[key][10][-1])
    
    

  # Adding the new columns     
  games_df['Year'] = year
  games_df['Wins'] = wins
  games_df['Losses'] = losses
  games_df['Games_played'] = games_played
  games_df['Win_percent'] = win_percent
  games_df['Points_for'] = points_for
  games_df['Points_against'] = points_against
  games_df['Point_diff'] = point_diff
  games_df['Head_to_head'] = head_to_head
  games_df['Op_win_percent'] = op_win_percent
  games_df['Op_points_for'] = op_points_for
  games_df['Op_points_against'] = op_points_against
  games_df['Op_point_diff'] = op_point_diff

  game_dfs.append(games_df)

print(team_dict['Boston'][7])
game_dfs = pd.concat(game_dfs)

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', 1000)
pd.set_option('display.colheader_justify', 'center')
pd.set_option('display.precision', 3)

display(game_dfs.head(32))

class Model(tf.keras.Model):
  def __init__(self, num_stats):
    super(Model, self).__init__()

    self.decorrelation_coef = 0.2
    self.l1 = tf.keras.layers.Dense(64, activation='relu')
    self.l2 = tf.keras.layers.Dense(32, activation='relu')
    self.l3 = tf.keras.layers.Dense(16, activation='relu')
    self.l4 = tf.keras.layers.Dense(1, activation='softmax')

  
  def call(self):


  def loss(self, probs, labels, odds):
    error = tf.math.square(probs - labels)
    decorrelation = self.decorrelation_coef * tf.math.square(probs - (1/odds))
    return tf.reduce_sum(error - decorrelation)